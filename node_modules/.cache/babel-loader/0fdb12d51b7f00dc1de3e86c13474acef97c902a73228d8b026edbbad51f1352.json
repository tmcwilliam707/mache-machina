{"ast":null,"code":"import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js';\nimport { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.134.0/examples/jsm/loaders/GLTFLoader.js';\n\n// Scene setup\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / 600, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nconst container = document.getElementById('model-container');\nrenderer.setSize(container.offsetWidth, 600);\ncontainer.appendChild(renderer.domElement);\n\n// Lighting\nconst ambientLight = new THREE.AmbientLight(0xF5E8C7, 0.5);\nscene.add(ambientLight);\nconst pointLight = new THREE.PointLight(0xD4A017, 1, 100);\npointLight.position.set(5, 5, 5);\nscene.add(pointLight);\n\n// Load 3D Model\nconst loader = new GLTFLoader();\nloader.load('path/to/your/machina-model.glb',\n// Replace with your model file\ngltf => {\n  const model = gltf.scene;\n  scene.add(model);\n  model.position.set(0, 0, 0);\n  model.scale.set(1, 1, 1); // Adjust scale as needed\n}, undefined, error => console.error('Error loading model:', error));\n\n// Camera position\ncamera.position.z = 5;\n\n// Orbit controls (rotate with mouse)\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.05;\n\n// Animation loop\nfunction animate() {\n  requestAnimationFrame(animate);\n  controls.update();\n  renderer.render(scene, camera);\n}\nanimate();\n\n// Responsive resize\nwindow.addEventListener('resize', () => {\n  camera.aspect = container.offsetWidth / 600;\n  camera.updateProjectionMatrix();\n  renderer.setSize(container.offsetWidth, 600);\n});","map":{"version":3,"names":["THREE","GLTFLoader","scene","Scene","camera","PerspectiveCamera","window","innerWidth","renderer","WebGLRenderer","antialias","container","document","getElementById","setSize","offsetWidth","appendChild","domElement","ambientLight","AmbientLight","add","pointLight","PointLight","position","set","loader","load","gltf","model","scale","undefined","error","console","z","controls","OrbitControls","enableDamping","dampingFactor","animate","requestAnimationFrame","update","render","addEventListener","aspect","updateProjectionMatrix"],"sources":["/Users/taylormcwilliam/Documents/GitHub/mache-machina/mache-machina/src/components/App.js"],"sourcesContent":["import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js';\nimport { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.134.0/examples/jsm/loaders/GLTFLoader.js';\n\n// Scene setup\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / 600, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nconst container = document.getElementById('model-container');\n\nrenderer.setSize(container.offsetWidth, 600);\ncontainer.appendChild(renderer.domElement);\n\n// Lighting\nconst ambientLight = new THREE.AmbientLight(0xF5E8C7, 0.5);\nscene.add(ambientLight);\nconst pointLight = new THREE.PointLight(0xD4A017, 1, 100);\npointLight.position.set(5, 5, 5);\nscene.add(pointLight);\n\n// Load 3D Model\nconst loader = new GLTFLoader();\nloader.load(\n    'path/to/your/machina-model.glb', // Replace with your model file\n    (gltf) => {\n        const model = gltf.scene;\n        scene.add(model);\n        model.position.set(0, 0, 0);\n        model.scale.set(1, 1, 1); // Adjust scale as needed\n    },\n    undefined,\n    (error) => console.error('Error loading model:', error)\n);\n\n// Camera position\ncamera.position.z = 5;\n\n// Orbit controls (rotate with mouse)\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.05;\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n}\nanimate();\n\n// Responsive resize\nwindow.addEventListener('resize', () => {\n    camera.aspect = container.offsetWidth / 600;\n    camera.updateProjectionMatrix();\n    renderer.setSize(container.offsetWidth, 600);\n});"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,mEAAmE;AAC1F,SAASC,UAAU,QAAQ,+EAA+E;;AAE1G;AACA,MAAMC,KAAK,GAAG,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAG,IAAIJ,KAAK,CAACK,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;AAClF,MAAMC,QAAQ,GAAG,IAAIR,KAAK,CAACS,aAAa,CAAC;EAAEC,SAAS,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;AAE5DL,QAAQ,CAACM,OAAO,CAACH,SAAS,CAACI,WAAW,EAAE,GAAG,CAAC;AAC5CJ,SAAS,CAACK,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;AAE1C;AACA,MAAMC,YAAY,GAAG,IAAIlB,KAAK,CAACmB,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;AAC1DjB,KAAK,CAACkB,GAAG,CAACF,YAAY,CAAC;AACvB,MAAMG,UAAU,GAAG,IAAIrB,KAAK,CAACsB,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC;AACzDD,UAAU,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAChCtB,KAAK,CAACkB,GAAG,CAACC,UAAU,CAAC;;AAErB;AACA,MAAMI,MAAM,GAAG,IAAIxB,UAAU,CAAC,CAAC;AAC/BwB,MAAM,CAACC,IAAI,CACP,gCAAgC;AAAE;AACjCC,IAAI,IAAK;EACN,MAAMC,KAAK,GAAGD,IAAI,CAACzB,KAAK;EACxBA,KAAK,CAACkB,GAAG,CAACQ,KAAK,CAAC;EAChBA,KAAK,CAACL,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3BI,KAAK,CAACC,KAAK,CAACL,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,EACDM,SAAS,EACRC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAC1D,CAAC;;AAED;AACA3B,MAAM,CAACmB,QAAQ,CAACU,CAAC,GAAG,CAAC;;AAErB;AACA,MAAMC,QAAQ,GAAG,IAAIlC,KAAK,CAACmC,aAAa,CAAC/B,MAAM,EAAEI,QAAQ,CAACS,UAAU,CAAC;AACrEiB,QAAQ,CAACE,aAAa,GAAG,IAAI;AAC7BF,QAAQ,CAACG,aAAa,GAAG,IAAI;;AAE7B;AACA,SAASC,OAAOA,CAAA,EAAG;EACfC,qBAAqB,CAACD,OAAO,CAAC;EAC9BJ,QAAQ,CAACM,MAAM,CAAC,CAAC;EACjBhC,QAAQ,CAACiC,MAAM,CAACvC,KAAK,EAAEE,MAAM,CAAC;AAClC;AACAkC,OAAO,CAAC,CAAC;;AAET;AACAhC,MAAM,CAACoC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;EACpCtC,MAAM,CAACuC,MAAM,GAAGhC,SAAS,CAACI,WAAW,GAAG,GAAG;EAC3CX,MAAM,CAACwC,sBAAsB,CAAC,CAAC;EAC/BpC,QAAQ,CAACM,OAAO,CAACH,SAAS,CAACI,WAAW,EAAE,GAAG,CAAC;AAChD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}